<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (singleton()) {
    exit;
}

//Earthquake SIM Variables
quakeScaleUp = true; 
quakeCycleCurrent = 0; 
quakeCycleMax = 4;
quakeTimeMax = 60; 

flash = false;
flashTimer = 3;

zoomFactor = 1;  

hitRipple = false; 
hitRipplePointX = room_width/2;
hitRipplePointY = room_height/2;
hitRippleExpand = 0.5;  
hitRippleOpacity =0; 

birdRipple = false; 
birdRipplePointX = room_width/2;
birdRipplePointY = room_height/2;
birdRippleExpand = 0.5;  
birdRippleOpacity =0; 


 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenShake(manager.shake0+manager.shake1,-manager.shake0-manager.shake1);

if (!manager.earthquakeRunning) {
    shakeReset(); 
}

if (flashTimer &lt;= 0 &amp;&amp; !flash) {
    flashTimer = 3; 
}

if (flashTimer &lt;= 0) {
    flash = false;
    flashTimer = 0; 
}

if (zoomFactor &gt; 1) {
view_wview[0] = 375 * zoomFactor; 
view_hview[0] = 667 * zoomFactor; 
view_object[0] = ball;
}

if (hitRippleRadius &lt;= 75 &amp;&amp; ripple) {
hitRippleRadius = lerp(hitRippleRadius, 76, 0.4); 
hitRippleWidth = lerp(hitRippleWidth, 10, 0.4); 
//hitRippleOpacity = lerp(hitRippleOpacity, 0, 0.4); 
}

if (!ripple) {
hitRippleRadius = 10; 
hitRippleWidth = 25;  
hitRippleOpacity = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recursive Earthquake Simulator

if (quakeCycleCurrent &gt;= quakeCycleMax) {
    if (quakeScaleUp) {
        quakeCycleCurrent = 0; 
        quakeScaleUp = false;
        alarm[0] = quakeTimeMax; 
    }
    else {
        shakeReset();
    }
}
else {
    quakeCycleCurrent++;
    if (quakeScaleUp) {
        alarm[0] = quakeTimeMax; 
    }
    else {
        alarm[0] = quakeTimeMax * .85;
    }
}

if (quakeScaleUp) 
{
    manager.shake0 += random_range(1,3);
}
else 
{
    manager.shake0 -= 1.5;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>screenShake(manager.shake0+manager.shake1,-manager.shake0-manager.shake1);

if (!manager.earthquakeRunning) {
    shakeReset(); 
}

if (flashTimer &lt;= 0 &amp;&amp; !flash) {
    flashTimer = 3; 
}

if (flashTimer &lt;= 0) {
    flash = false;
    flashTimer = 0; 
}

if (zoomFactor &gt; 1) {
view_wview[0] = 375 * zoomFactor; 
view_hview[0] = 667 * zoomFactor; 
view_object[0] = ball;
}

if (hitRippleExpand &lt; 2.75 &amp;&amp; hitRipple) {
hitRippleExpand = lerp(hitRippleExpand, 2.75, 0.2 * mvc.timeMulti);  
hitRippleOpacity = lerp(hitRippleOpacity, 0, 0.2 * mvc.timeMulti); 
}
else {
rippleReset(0); 
}

if (birdRippleExpand &lt; 1.5 &amp;&amp; birdRipple) {
birdRippleExpand = lerp(birdRippleExpand, 1.5, 0.4 * mvc.timeMulti);  
birdRippleOpacity = lerp(birdRippleOpacity, 0, 0.4 * mvc.timeMulti); 
}
else {
rippleReset(1); 
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (flash &amp;&amp; flashTimer &gt; 0) 
{
    draw_set_color(c_white); 
    draw_rectangle(0,0,room_width, room_height, false);     
    flashTimer--; 
}
 draw_set_color(c_red); 
 
 if (hitRipple) 
 {
  draw_sprite_ext(sprHitRing, 0, hitRipplePointX,hitRipplePointY, 0.5* hitRippleExpand,0.5* hitRippleExpand, 0, c_white, hitRippleOpacity);
 }
 
 if (birdRipple) 
 {
   draw_sprite_ext(sprHitRing, 0, birdRipplePointX,birdRipplePointY, 0.5* birdRippleExpand,0.5* birdRippleExpand, 0, c_white, birdRippleOpacity);
 } 

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
