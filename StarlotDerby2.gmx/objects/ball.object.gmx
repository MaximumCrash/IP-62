<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>4</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Initialization
trail_init();
currentPath = 0;
path_start(pitcher.pitch[currentPath], manager.ballSpeed, path_action_continue, 1);

timer = 0;
hue = 0;
tailLength = 25; 

trickCount = 0;
trick = trickPitch(3); //Takes in Max Number of Tricks (Curently 3)
trickRun = false;
trickPosition = random_range(0.25, 0.9);
hardTimer = irandom_range(10, 30); //Between 0.1 seconds and 0.5 seconds. 

maxY = 1000;
extraYscale = 0;
baseScale = 0.1;
lastY = 0;
currentY = 0;
image_xscale = 0;
image_yscale = 0;
alarm[2] = 1;

ballHit = false;
goodHit = false;
batAngle = 0;
hitPositionX = 0;
hitPositionY = 0;
exitPositionX = 0;
exitPositionY = 0;
currentDistance = 0;
exitDistance = 1;
exitSpeed = 0; 
initialBatAngle = 105;
closedTail = true; 
tailColor = manager.cYellow;
drawTail = true; 
tailShiftHue = false; 
hueUp = true; 
//Runs Earthquake 16% Chance
if (manager.earthquake) 
{
    if (random(12) &gt;= 11) 
    {
        if (!manager.earthquakeRunning) 
        {      
            runQuake();  
        }
    } 
}

if (manager.ballGhost) 
{
    tailLength = 15; 
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!ballHit) {
    addStrike();
}

/*with(ballExtra) {
    instance_destroy();
}*/

pitcher.alarm[0] = 5; //Tell the Pitcher to make a new Ball. 
trail_destroy();
manager.ballHit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit Ball Scripts Direction
//After Collision this Script is Run. 
//Depending on the Angle of the Bat the ball will fly to 
//predetermined points outside of the screen. 

if (batAngle &gt; 0 &amp;&amp; batAngle &lt; (initialBatAngle + (30 * 1))) 
{ //RIGHT FOUL
    drawTail = false; 
    exitBall(528, 272, true, 0);
} else if (batAngle &gt;= (initialBatAngle + (30 * 1)) &amp;&amp; batAngle &lt; (initialBatAngle + (30 * 2))) 
{ //RIGHT FIELD
    exitBall(room_width, -112, false, 1);
} else if (batAngle &gt;= (initialBatAngle + (30 * 2)) &amp;&amp; batAngle &lt; (initialBatAngle + (30 * 3))) 
{ //CENTER FIELD
    exitBall(room_width / 2, -112, false, 2);
} else if (batAngle &gt;= (initialBatAngle + (30 * 3)) &amp;&amp; batAngle &lt; (initialBatAngle + (30 * 4))) 
{ //LEFT FIELD
    exitBall(0, -112, false, 3);
} else if (batAngle &gt;= (initialBatAngle + (30 * 4)) &amp;&amp; batAngle &lt; (initialBatAngle + (30 * 5))) 
{ //LEFT FOUL
    drawTail = false;
    exitBall(-153, 272, true, 4);
} else if (batAngle &gt;= (initialBatAngle + (30 * 5)) &amp;&amp; batAngle &lt;= 360) 
{ //LEFT FOUL
    drawTail = false;
    exitBall(-153, 272, true, 4);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Create Fancy Spinning EXTRAs
ballEX0 = instance_create(x, y, ballExtra); 
ballEX1 = instance_create(x, y, ballExtra); 
ballEX2 = instance_create(x, y, ballExtra); 
ballEX3 = instance_create(x, y, ballExtra); 



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//STOP ALL TRICKS and RESET

switch (trick) {
case 1: { //HARD STOP
path_speed = manager.ballSpeed; 
break;
}

case 2: { //SPEED UP
path_speed = smooth_approach(path_speed, manager.ballSpeed, random_range(0,1)); 
break;
}

case 3: { //SLOW DOWN
path_speed = smooth_approach(path_speed, manager.ballSpeed, random_range(0,1)); 
break;
}
}
//STOP ALL TRICKS and RESET
switch (trick) {
    case 1:
        { //HARD STOP
            path_speed = manager.ballSpeed;
            break;
        }

    case 2:
        { //SPEED UP
            path_speed = smooth_approach(path_speed, manager.ballSpeed, random_range(0, 1));
            break;
        }

    case 3:
        { //SLOW DOWN
            path_speed = smooth_approach(path_speed, manager.ballSpeed, random_range(0, 1));
            break;
        }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (drawTail) 
{
    trail_calculate(tailLength);
}
image_angle+= (manager.ballSpeed*3) *mvc.timeMulti;
//This is for FEVER Balls Only
if (hueUp) {
    hue += (5*mvc.timeMulti); 
    if (hue &gt;= 255) {
        hueUp = false;
    }
}
else {
hue-= (5*mvc.timeMulti); 
if (hue &lt;= 0) {
        hueUp = true;
    }
}

if (tailShiftHue) 
{
    tailColor = make_colour_hsv(hue, 255, 255);
}

//Runs a Trick depending on a couple of Parameters. 
if (path_position &gt; trickPosition &amp;&amp; !trickRun) {
    if (manager.difficulty &gt;= 2 &amp;&amp; manager.difficulty &lt; 3.25) {
        //Run a Trick if Possible
        if (random(10) &gt;= 9 &amp;&amp; currentPath == 1 &amp;&amp; trickCount &lt; 2) {
            trickRun = true;
            switch (trick) {
                case 1:
                    {
                        path_speed = 0;
                        alarm[1] = hardTimer;
                        break;
                    }

                case 2:
                    {
                        if (manager.ballSpeed &lt; 13) {
                            path_speed = (manager.ballSpeed * random_range(1.5, 2.25))*mvc.timeMulti;
                            alarm[1] = hardTimer;
                        }
                        break;
                    }

                case 3:
                    {
                        if (manager.ballSpeed &gt; 10) {
                            path_speed = (manager.ballSpeed * random_range(.1, .25))*mvc.timeMulti;
                            alarm[1] = hardTimer;
                        }
                        break;
                    }
            }
        }
    }
}

//Handles the Size of the Ball depending on it's distance.
//Creates a fake (Ball coming towards the screen effect. 
if (currentY &lt; y &amp;&amp; currentY &lt; maxY &amp;&amp; !ballHit) {
    currentY = y;
    image_yscale = (currentY / maxY) + baseScale + extraYscale;
    
    if (manager.ballGhost) 
    {
        image_alpha =0.55 - (currentY / maxY);
    }
    
} else if (ballHit) {
    image_alpha = 1; 
    image_angle+= (manager.ballSpeed *5) *mvc.timeMulti; 
    currentDistance = point_distance(x, y, exitPositionX, exitPositionY);
    image_yscale = (currentDistance / exitDistance) + baseScale + extraYscale;
    
    if (instance_number(ballExtra) &gt; 0) {
    if (currentDistance/exitDistance &lt;= .55 &amp;&amp; !ballExtra.moveToBat &amp;&amp; ballHit) {
       ballExtra.moveToBat = true; 
    }
}
}
if (image_yscale &gt; 1) {
    image_yscale = 1;
}
image_xscale = image_yscale;

if (extraYscale &gt; 0) {
extraYscale-= (0.05 *mvc.timeMulti); 
}


//Directional Steering
if (ballHit) {
//direction += median(-0.75, 0.75, (1-0.1) * angle_difference(point_direction(x,y,exitPositionX, exitPositionY),direction)); 
//motion_add(direction, 0);  
}

path_speed = manager.ballSpeed * mvc.timeMulti;
speed = mvc.timeMulti * ((manager.equip[1] * (manager.swingCharge / manager.swingChargeMax + 0.25)) + (manager.ballSpeed * 1.25))

if (ballHit) {
if (instance_number(bird) &gt; 0) {
inst = instance_nearest(x,y,bird); 

if (sqrt(power(inst.x-x,2)+power(inst.y-y,2)) &lt;= 80) {
mvc.currentState = speedState.slowmo;
}    
else 
{
mvc.currentState = speedState.normal;
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bat">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Response
//We have collided with the Bat. 
//Stop everything and EXIT the Ball. 
if (!ballHit) {
ballHit = true;
path_end();
path_speed = 0; 
hitPositionX = x; 
hitPositionY = y; 
batAngle = manager.swingArc;
exitSpeed = (manager.ballSpeed*.35) + (manager.equip[1] * (manager.swingCharge / manager.swingChargeMax + 0.25)) + (manager.ballSpeed * 1.25);
//exitDistance = point_distance(hitPositionX, hitPositionY, exitPositionX, exitPositionY);
//extraYscale = 0.1; 
alarm[3] = 1;
bat.xScaleExtra += 0.1;
extraYscale += 0.05; 

if (manager.batShapeShift) {
if (percent_chance(irandom_range(25,80))) {
//Change the Bat
}
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="bird">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (ballHit &amp;&amp; other.state!=2) {
//*****Make other(aka Bird) sprite into Dead hit sprite and then switch state. 
sleep_hack(300);
    other.state = 2; //Sets Bird State to Dead. 
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If We're at the end of a Weird Path Destroy the Ball. 
if (pitcher.pitch[0,currentPath] == asset_get_index("endWarp") || pitcher.pitch[0,currentPath] == asset_get_index("endWarpR")) {
instance_destroy(); 
}

//Start our New Path! 
if (currentPath &lt; 2 &amp;&amp; !manager.ballHit) {
currentPath++;
path_start(pitcher.pitch[0,currentPath], manager.ballSpeed, path_action_continue,true);
trickRun = false; 
if (currentPath == 2) {
trickPosition = random_range(0.1,0.5); 
}
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Runs a destroy timer. 
alarm[0] = 40;

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_set_alpha(0.75);
draw_circle(x, y +25,sprite_width/2,false);
draw_set_color(c_white);
draw_set_alpha(1);

if (drawTail) 
{
   draw_trail_ext((sprite_width+6),tailColor,-1,closedTail,image_alpha);
}
if (!manager.ballGhost) 
{
    draw_circle_colour(x,y,sprite_width*.59,manager.cYellow,manager.cYellow,false);
}
draw_self();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
