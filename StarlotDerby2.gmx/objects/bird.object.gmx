<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>birdTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variable Initialization
turnDir = 0; //False = Right, True = Left
lastX = x; //We use this to check if we're turning left or right. 
currentY = y; 
maxY = currentY + 198; 
type = 0; //Type of Bird. 0 = Normal, 1 = Golden, 2 = Gem
moveSpeed = 4; //Speed to hop ahead. 
stopTime = random_range(100,180);
hopMaximum = irandom_range(5, 3); 
hopCount = 0; 
reverse = false;
currentPath = choose(birdPath,birdPathR); 
if (x &gt; room_width) {
currentPath = birdPathR;
}
else {
currentPath = birdPath; 
}
path_start(currentPath,0,path_action_reverse,false);
 image_speed = 0.15;
 state = 0; //0 = Walking, 1 = Waiting, 2 = Dead
 dead = false;
 baseScale = 0.35;
 extraYscale = 0;
 finalScale = image_yscale;
 flip = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroyer
instance_destroy(); 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Alarm
if (!dead) {

dead = true;
finalScale = 1.25;

image_xscale = finalScale; 
if (manager.birdDeadPath == birdDead) {
manager.birdDeadPath = birdDeadR; 
}
else {
manager.birdDeadPath = birdDead; 
}

path_start(manager.birdDeadPath, moveSpeed+2, path_action_stop, false); 


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop Up
if (state != 2) 
{
 moveSpeed = 4; 
 hopCount = 0; 
 image_speed = 0.25; 
 turnDir = 0; 
 state = 0; 
 image_yscale = image_yscale * 1.5; 
 image_xscale = image_xscale * .75; 
}
else {
image_xscale = 1; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State &amp; Flip Handler 
//Handles Flipping
if (state != 2 &amp;&amp; state != 1)
{
    if (x &lt; lastX &amp;&amp; hopCount != hopMaximum) 
    {
        flip = false;
    }
    else 
    {
        flip = true; 
    }

    lastX = x; 

    if (turnDir == 1) 
    {
        image_xscale = lerp(image_xscale, -1, 0.1* mvc.timeMulti); 
    }
    else if (turnDir == 2) 
    {
        image_xscale = lerp(image_xscale, 1, 0.1 * mvc.timeMulti); 
    }
    


}

if (state == 2) 
{
    //Set Sprite to Dead.  
    alarm[2] = 1; 
    image_angle = lerp(image_angle, 1000, 0.04*mvc.timeMulti);  
    path_speed = lerp(path_speed, moveSpeed,0.4* mvc.timeMulti); 
}
//Handles the Size of the Bird depending on it's distance.
//Creates a fake (Ball coming towards the screen effect. 
if (state == 2) 
{
    finalScale = lerp(finalScale, 1, 0.4 * mvc.timeMulti); 
    
    image_yscale = finalScale;
    moveSpeed = lerp(moveSpeed, 70, 0.1 * mvc.timeMulti);
    image_xscale = finalScale;
}
else 
{
    currentY = y;
    image_yscale = lerp(image_yscale,(currentY / maxY) + baseScale + extraYscale,.25 * mvc.timeMulti);

    if (flip) 
    {
     image_xscale = lerp(image_xscale,image_yscale + extraYscale,0.25 * mvc.timeMulti);
    }
    else 
    {
     image_xscale = lerp(image_xscale,-(image_yscale + extraYscale),0.1 * mvc.timeMulti);
    }
}
if (image_yscale &gt; 1) 
{
    image_yscale=1;
}




if (reverse) 
{
 path_speed =  -moveSpeed * mvc.timeMulti;
}
else 
{
 path_speed =  moveSpeed * mvc.timeMulti;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reverse @ end of Path
 if (reverse) 
 {
  reverse = false;
 }
 else 
 {
  reverse = true;
 }



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hop Animation Controller
hopCount++; 

if (hopCount = hopMaximum &amp;&amp; state != 2)
{
    image_speed = 0; 
    image_index = 0; 
    moveSpeed = 0;
    state = 1; 
    alarm[0] = stopTime;
    alarm[1] = 5; 

    if (flip) {
        flip = false;
    }
    else {
        flip = true; 
    }
    
}

if (state == 2) {
   image_speed = 0; 
   image_index = 0;
   moveSpeed += 0.5 * mvc.timeMulti;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == 2) {
alarm[3] = 10; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self(); 
if (manager.debug) 
{
    draw_circle(x,y, 55, true); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
