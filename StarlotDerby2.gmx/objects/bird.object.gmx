<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>birdTest</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>5</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turnDir = 0; //False = Right, True = Left
lastX = x; //We use this to check if we're turning left or right. 
currentY = y; 
maxY = currentY + 198; 
type = 0; //Type of Bird. 0 = Normal, 1 = Golden, 2 = Gem
moveSpeed = 4; //Speed to hop ahead. 
stopTime = random_range(100,180);
hopMaximum = irandom_range(5, 3); 
hopCount = 0; 
//currentPath = choose(birdPath,birdPathR); 
if (x &gt; room_width) {
currentPath = birdPathR;
}
else {
currentPath = birdPath; 
}
path_start(currentPath,0,path_action_reverse,false);
 image_speed = 0.15;
 state = 0; //0 = Walking, 1 = Waiting, 2 = Dead
 dead = false;
 baseScale = 0.25;
 extraYscale = 0;
 finalScale = image_yscale;
 flip = true; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!dead) {
dead = true;
finalScale = image_yscale;

if (finalScale != 1 || finalScale != -1) {
    finalScale = 1; 
} 

if (manager.birdDeadPath == birdDead) {
manager.birdDeadPath = birdDeadR; 
}
else {
manager.birdDeadPath = birdDead; 
}

path_start(manager.birdDeadPath, moveSpeed+2, path_action_stop, false); 

switch (type) {
    case 0: { //If Normal
        givePoint(1 * manager.multiplier); 
        break;
    }
    case 1: { //If Golden
        givePoint(2 * manager.multiplier); 
        break;
    }
    case 2: { //If Gem
        givePoint(3 * manager.multiplier); 
        break; 
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Hop Up
path_speed = moveSpeed; 
hopCount = 0; 
image_speed = 0.25; 
turnDir = 0; 
state = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Handles Flipping
if (state != 2 &amp;&amp; state != 1)
{
    if (x &lt; lastX &amp;&amp; hopCount != hopMaximum) 
    {
        flip = false;
    }
    else 
    {
        flip = true; 
    }

    lastX = x; 

    if (turnDir == 1) 
    {
        if (image_xscale &gt; -1) 
        {
            image_xscale = smooth_approach(image_xscale, -image_xscale, 0.25); 
        }
    }
    else if (turnDir == 2) 
    {
        if (image_xscale &lt; 1) 
        {
            image_xscale = smooth_approach(image_xscale, -image_xscale, 0.25); 
        }
    }
}

if (state == 2) 
{
    //Set Sprite to Dead.  
    alarm[2] = 1; 
    image_yscale = 1; 
    image_xscale = 1;
    
    if (manager.birdDeadPath == birdDeadR) 
    {
        image_angle += 16;  
    }   
    else if (manager.birdDeadPath == birdDead) 
    {
        image_angle -= 16; 
    }
    
    path_speed = smooth_approach(path_speed, moveSpeed + 5, 0.5); 
}
//Handles the Size of the Bird depending on it's distance.
//Creates a fake (Ball coming towards the screen effect. 
if (state == 2) 
{
    image_yscale = 1;
    moveSpeed += 0.5;
    path_speed = moveSpeed; 
    image_xscale = 1;
}
else 
{
    currentY = y;
    image_yscale = (currentY / maxY) + baseScale + extraYscale;
}
if (image_yscale &gt; 1) 
{
    image_yscale=1;
}

if (flip) 
{
    image_xscale = smooth_approach(image_xscale,image_yscale + extraYscale,0.25);
}
else 
{
    image_xscale = smooth_approach(image_xscale,-(image_yscale + extraYscale),0.25);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentPath == birdDead || currentPath == birdDeadR) {
instance_destroy(); 
}
else {
moveSpeed = -moveSpeed;
} 

 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hopCount++; 

if (hopCount = hopMaximum &amp;&amp; state != 2)
{
    image_speed = 0; 
    image_index = 0; 
    path_speed = 0;
    state = 1; 
    alarm[0] = stopTime;
    alarm[1] = 5; 
    
    if (flip) {
        flip = false;
    }
    else {
        flip = true; 
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
