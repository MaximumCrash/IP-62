<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>fakeProbe</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Surface
sf  = -1;

hue = random(255);

img      = choose(0, 1, 2);
rot      = random(360);
alarm[0] = (room_speed * 3); // Roughly three seconds each 

// Trail length in frames
length   = 32;
currentY = y;
baseScale = .25; 
maxY = 700; 

scaleTimer = 120; 

for (var i = 0; i &lt; length; i += 1) {
    xx[i] = x;
    yy[i] = y;
    scale[i] = currentY/maxY + baseScale; 
}

state = false; //0 - on Standby 1 - show Path on Repeat

mypath = pitcher.nextPitch;
currentPath = 0; 
path_start(mypath[currentPath],manager.ballSpeed,path_action_continue,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Rotate
img++;

// Wrap
if (img &gt; 2)
    img = 0;
    
// Reset
alarm[0] = (60 * 3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i = (length - 1); i &gt; 0; i--) {
    xx[i] = xx[i - 1];
    yy[i] = yy[i - 1];
    scale[i] = scale[i-1]; 
}

xx[0] = x;
yy[0] = y;
currentY = y; 
scale[0] = (currentY/maxY);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rot -= 4;


if (scaleTimer &gt; 0) {
scaleTimer--; 
}
else {
scaleTimer = 120; 
baseScale = 0.1; 
}

if (baseScale &gt; 0) {
baseScale -= 0.01; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (currentPath &lt; 2) {
currentPath++;
path_start(pitcher.pitch[currentPath], manager.ballSpeed, path_action_continue, true); 

}
else {
x = pitcher.x; 
y = pitcher.y; 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free memory

if (surface_exists(sf))
    surface_free(sf);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_blend = make_color_hsv(hue, 255, 255);

// Change hue
hue += 0.5;

if (!surface_exists(sf))
    sf = surface_create(room_width, room_height);

// Draw trail to surface
surface_set_target(sf);
    // Clear surface
    draw_clear_alpha(c_black, 0);
    
    for (var i = 0; i &lt; length; i += 1)
        draw_sprite_ext(sprite_index, img, xx[i], yy[i], scale[i] + baseScale, scale[i] + baseScale, rot, image_blend, 1);
    
  //  draw_set_blend_mode(bm_subtract);
        // Vertical grid
     //   draw_sprite(sOverlay, -1, 0, 0);
        
        // Randomly draw horizontal lines
       /* for (var i = 0; i &lt; (room_height * 0.2); i += 1)
            if (choose(0, 1)) {
                var randomY = irandom(room_height);
                
                draw_line(0, randomY, room_width, randomY);
            }*/
 //   draw_set_blend_mode(bm_normal);
surface_reset_target();

// Draw surface to screen
draw_surface(sf, 0, 0);
    
// Draw final sprite
//draw_sprite_ext(sOverlay, img, mouse_x, mouse_y, 1, 1, rot, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
