<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (singleton()) {
    exit;
}

//Sets up Anti Aliasing 
display_reset(4, false);

//Compile Info
debug = false;
debugType = 0;
offset = 0;
doffset = 0;
length = 9;
list = ds_list_create();
savelist = ds_list_create();
precision = 0;
if (debug)
    ds_list_add(manager.list, "Initializing...");

//*****************COLOR LIBRARY

//Primary
cRed = make_colour_rgb(237, 30, 24);
cBlue = make_colour_rgb(8, 95, 255);
cYellow = make_colour_rgb(253, 201, 28);
cBlack = make_colour_rgb(25, 12, 7);

//Softy
csRed = make_colour_rgb(254, 76, 112);
csBlue = make_colour_rgb(92, 132, 242);
csYellow = make_colour_rgb(254, 190, 5);
csBlack = make_colour_rgb(55, 60, 77);

padding = 20; 

//*********************DATABASE
var itemList, gemList, fieldList, curseList, pitchList, dictionary, unlocked;
powerCount = 0;
curseCount = 0;

loadDB();

tempGem = 0;

//********************SAVE DATA
stats[0] = 0.0; //Batting Average
stats[1] = 0.0; //Hit Percentage
stats[2] = 0.0; //Seagulls Hit
stats[3] = 0.0; //Best Streak
stats[4] = 0.0; //Strikeout Percentage
stats[5] = 0.0; //Max Damage
stats[6] = 0.0; //Total Damage

equip[0] = 0; //Bat
equip[1] = 0; //Power = Base + Extra //NOT SAVED
equip[2] = 0; //Speed //NOT SAVED
equip[3] = 0; //Gem0
equip[4] = 0; //Gem1
equip[5] = 0; //Gem2 

setting[0] = true; //Music
setting[1] = true; //Sound Effects
setting[2] = true; //Vibration
setting[3] = false; //Power Saver

player[0] = 10; //Player Experience
player[1] = 0; //High Score Batting
player[2] = 0; //High Score Pitching 
player[3] = 0; //Coins


gifts = 0; //Number of "Gifts" in Stock. 

gems = ds_list_create(); //Gem List


prestige = 0;
xpRequired = 0;
currentLevel = getLevel();

//XP TO NEXT LEVEL = xpRequired - player[0];
//Object Variables

//*******BATS
batShapeShift = false; //Curse
batOverHeat = false; //Curse
batRiskyBusiness = false; //Curse
batSlugBat = false; //Curse
batLefty = false; //Curse
currentBat = equip[0]; 
//MVC
canSwing = true;
swingCount = 0;
swingMax = 3;
swingCharge = 0;
swingChargeMax = 150; //180 = 3 Seconds 240 = 4 Seconds 
chargeCount = 1; 
swingArc = 0;
heatCount = 0;

//********BIRDS
birdHappyBirthday = false; //Curse
birdDeadPath = birdDead; 

//********PITCHER 
pitcherSeeingDouble = false; //Curse
pitcherUltraMan = false; //Curse

//*******BALL
ballMaxSpeed = false; //Curse
ballGhost = false; //Curse
//MVC
ballHit = false;
ballExitSpeed = 0;
ballState = 0;
minBallSpeed = 6;
maxBallSpeed = 20;
ballSpeed = minBallSpeed; //DIFFICULTY MODIFIED
pitchRange = 0; //DIFFICULTY MODIFIED

//*******FIELD
currentField = 0;

//Curse Effected Values
powerCurseExtra = 0; //Curse
speedCurseExtra = 0; //Curse
feverSafety = 0; //Curse
futureChance = 0; //Curse
snipeChance = 0; //Curse
foggyWindows = false; //Curse
earthquake = false; //Curse
shake0 = 0;
shake1 = 0; 
earthquakeRunning = false; 
wavy = false; //Curse
wizKid = false; //Curse
multiplier = 1; //Curse

//Game Info
gameState = 0; //0 = Loading, 1 = Menus, 2 = In Game, 3 = Game Over, 4 = Paused
inGameState = 0; //0 = Batting, 1 = Pitching, 2 = Fever Mode, 3 = Ballistic
strikes = 0;
score = 0;
lastPitch = "";
difficulty = 0;
difficultySubtract = difficulty * .23;
lastDirection = 5; //0 = Right Foul, 1 = Right Field, 2 = Center Field, 3 = Left Field, 4 = Left Foul, 5 = None
dirMulti = 1;
dirMultiMax = 3; //This multiplier becomes 5 during Starstorms. 
fever = 0;
maxFever = 3;
maxBirdCount = 6;
birdCount = 0; 

//Fever
feverDifficulty = 0; 
feverDifMax = 4; 

tailSurf = surface_create(room_width, room_height); 

//Temporary Variables
lastBuiltCurse = 999;

gameStart();

alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_anykey) == true) {
    switch (keyboard_key) {
        case vk_down:
            {
                shake0--; 
                offset = max(offset - 1, 0);
                doffset = max(doffset - 1, 0);
                if (tempGem == 0) {
                    tempGem = array_height_2d(gemList) - 1;
                    equip[3] = tempGem;
                    equip[4] = 9999999;
                    equip[5] = 9999999;

                } else {
                    tempGem--;
                    equip[3] = tempGem;
                    equip[4] = 9999999;
                    equip[5] = 9999999;

                }

                break;
            }
        case vk_up:
            {
                shake0 ++; 
                offset = min(offset + 1, (ds_list_size(list) - min(ds_list_size(list), length)));
                doffset = min(doffset + 1, (ds_list_size(savelist) - min(ds_list_size(savelist), length)));
                if (tempGem == array_height_2d(gemList) - 1) {
                    tempGem = 0;
                    equip[3] = tempGem;
                    equip[4] = 9999999;
                    equip[5] = 9999999;
                } else {
                    tempGem++;
                    equip[3] = tempGem;
                    equip[4] = 9999999;
                    equip[5] = 9999999;
                }
                score++;
                break;
            }
        case vk_left:
            {
                /*if (equip[0] == 0) {
                    equip[0] = array_height_2d(itemList) - 5;
                } else {
                    equip[0]--;
                    verifyEquip(); 
                }*/
                screenFX.zoomFactor -= 0.1; 
                break;
            }
        case vk_right:
            {
                /*if (equip[0] == array_height_2d(itemList) - 5) {
                    equip[0] = 0;
                } else {
                    equip[0]++;
                    verifyEquip(); 
                }*/
                //bat.xScaleExtra += 0.3;
                screenFX.zoomFactor += 0.1;
                break;
            }
        case vk_space:
            {
                equip[3] = tempGem;
                equip[4] = 9999999;
                equip[5] = 9999999;
                setEquipment(equip[0]);
                if (debug) {
                    //debug = false;
                    //obj_scaler.visible = false;
                } else {
                    //   debug = true;
                    //  obj_scaler.visible = true;
                }
                break;
            }
        case ord("0"):
            {
                if (debug) {
                    debug = false;
                } else {
                    debug = true;
                }
                break;
            }
        case ord("1"):
            debugType = 0;
            break;
        case ord("2"):
            debugType = 1;
            break;
        case ord("A"):
            canSwing = false;
            break;
        case ord("3"):
            debugType = 2;
            break;
        case ord("D"):
            {
                canSwing = false;
                break;
            }
        case ord("4"):
            {
                debugType = 3;
                break;
            }
        case ord("5"):
            {
                runQuake(); 
                break;
            }
        case ord("R"):
            {
                addRandomGems();
                break;
            }
        case ord("P"):
            {
                if (debug) {
                    debug = false;
                } else {
                    debug = true;
                }
                break;
            }
        case ord("C"):
            {
                savegame_clear();
                break;
            }
        case ord("V"):
            {
                savegame_save();
                break;
            }
        case ord("B"):
            {
                savegame_load();
                break;
            }
       /* case vk_backspace:
            {
                game_restart();
                break;
            }*/
        case vk_backspace: {
                runCurse(); 
                break; 
            }
            case ord("L"): {
                unlockAll(); 
                break;
            }

    }
}

if (!canSwing) {
    if (swingArc &lt; 360) {
        if (manager.ballHit) {
            swingArc += (equip[2] * .85)*mvc.timeMulti;
        } else {
            if (swingCharge &gt; manager.swingChargeMax/3) {
                if (manager.batSlugBat) 
                {
                    swingArc += equip[2]*mvc.timeMulti;
                }
                else 
                {
                    swingArc += (equip[2] * 1.25)*mvc.timeMulti;
                }
            }
            else {
                if (manager.batSlugBat) 
                {
                    swingArc += (equip[2] *.75)*mvc.timeMulti;
                }
                else 
                {
                    swingArc += equip[2]*mvc.timeMulti;
                }
                
            }
        }
    } else {
        swingArc = 0;
        swingCharge = 0;
        canSwing = true;
    }
} else {
    swingArc = 0;
    canSwing = true;
}

//Difficulty Manager
if (difficulty &lt; 0)
    difficulty = 0;

if os_is_paused() {

}

//Over heat subtractor.
if (heatCount &gt; 0) {
    swingCharge = 0;
    heatCount -= 1*mvc.timeMulti;
}

if (difficulty &lt; 3) {
    //Lower Difficulty by 23% of Current Difficulty. 
    difficultySubtract = difficulty * .23;
}

if (ballSpeed &gt; maxBallSpeed) {
    ballSpeed = maxBallSpeed;
}

//Bird Spawner



//Touch Controls

//IF IN GAME 

//IF MOUSE DOWN -&gt; CHARGE THE BAT
if device_mouse_check_button(0, mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, 0, 0, room_width, room_height) {

    if (swingCharge &lt; swingChargeMax) {
        if (heatCount == 0) {
            if (swingArc == 0) {
                swingCharge+= (chargeCount*mvc.timeMulti);
            }
        }
    } else {
        if (heatCount == 0) {
            heatCount = swingChargeMax;
        }
    }
}


//SWING
if device_mouse_check_button_released(0, mb_left) &amp;&amp; point_in_rectangle(mouse_x, mouse_y, 0, 0, room_width, room_height) {
    if (heatCount == 0) {
        canSwing = false;

    }
}

if (wizKid) {
feverDifficulty = feverDifMax;  
}

if (shake1 &gt;0) {
shake1 -= 0.3*mvc.timeMulti ;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>manager</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug) {
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(view_xview[0], view_yview[0] + view_hview[0] - (view_hview[0] * 0.25), view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], false);

    draw_set_alpha(1);
    draw_set_color(c_white);
    switch (debugType) {
        case 0:
            { //Event Reporting
                var i, n, line = "";
                for (i = 0; i &lt; min(ds_list_size(list), length); i++) {
                    line += string(ds_list_find_value(list, i + max(ds_list_size(list) - length, 0) - offset)) + "#";
                }
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding, line);
                break;
            }
        case 1:
            { //Batting 
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding, "Current Bat: " + itemList[equip[0], 0]);
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + lineHeight, "Current Power: " + string(equip[1]) + " Current Speed: " + string(equip[2]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 2), "Directional Multiplier: " + string(dirMulti));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 3), "Exit Swing Arc: " + string(swingArc) + " Exit Ball Speed: " + string(ballExitSpeed));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 4), "Ball State: " + string(ballState) + " Game State: " + string(gameState));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 5), "Current Fever: " + string(fever) + " Max Fever: " + string(maxFever));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 6), "Gem 0: " + string(gemList[tempGem, 0]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 7), "Power Curse Extra: " + string(powerCurseExtra) + " speedCurseExtra: " + string(speedCurseExtra));
                break;
            }
        case 2:
            { //Event Reporting
                var i, n, line = "";
                for (i = 0; i &lt; min(ds_list_size(savelist), length); i++) {
                    line += string(ds_list_find_value(savelist, i + max(ds_list_size(savelist) - length, 0) - doffset)) + "#";
                }
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding, line);
                break;
            }
        case 3:
            {
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding, "Swing Charge: " + string(swingCharge));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + lineHeight, "Heat Count: " + string(heatCount));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 2), "Directional Multiplier: " + string(dirMulti));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 3), "Current Difficulty: " + string(difficulty) + " Current Level: " + string(currentLevel));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 4), "Ball Speed: " + string(ballSpeed) + " Game State: " + string(gameState));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 5), "Difficulty Subtract: " + string(difficultySubtract) + " Max Fever: " + string(maxFever));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 6), "Gem 0: " + string(gemList[tempGem, 0]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 7), "Power Curse Extra: " + string(powerCurseExtra) + " speedCurseExtra: " + string(speedCurseExtra));
                break;
            }
        case 4:
            { 
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding, "Stat 0: " + string(stats[0]) + " Stat 1: " + string(stats[1]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + lineHeight, "Stat 2: " + string(stats[2]) + " Stat 3: " + string(stats[3]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 2), "Stat 4: " + string(stats[4]) + " Stat 5: " + string(stats[5]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 3), "Stat 6: " + string(stats[6]) + " Equip 0: " + string(equip[0]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 4), "Equip 3: " + string(equip[3]) + " Equip 4: " + string(equip[4]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 5), "Equip 5: " + string(equip[5]) + " Setting 0: " + string(setting[0]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 6), "Setting 1: " + string(setting[1]) + " Setting 2: " + string(setting[2]));
                draw_text(view_xview[0] + padding, (view_yview[0] + view_hview[0] - (view_hview[0] * 0.25)) + padding + (lineHeight * 7), "Setting 3: " + string(setting[3]) + " Player XP: " + string(player[0]));
                break;
            }

    }

}
draw_text(view_wview[0] / 2, view_hview[0] / 2, score);
draw_set_color(c_black);

for (a = 0; a &lt; array_length_1d(pitcher.pitch); a++) 
{
 //   draw_path(pitcher.nextPitch[a],pitcher.x,pitcher.y, true); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
