<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_reset(4,false); 

//Compile Info
debug = true; 
debugType = 0;
offset = 0;
doffset = 0;
length = 9;
list = ds_list_create();
savelist = ds_list_create(); 
precision = 0; 
if (debug) 
ds_list_add(manager.list, "Initializing...");

message[0] = "\0Hi I'm \4Rejon";
newChat(message, "none"); 

//*****************UI Positioning
floatLeft = view_xview[0];
floatTop = view_yview[0];
floatxMid = view_xview[0] + (view_wview[0]*0.5);
floatyMid = view_yview[0] + (view_hview[0]*0.5);
//floatRight =  ;
floatBottom = view_yview[0] + view_hview[0];
quarterX = view_wview[0] * 0.25;
quarterY = view_hview[0] * 0.25;
padding = 15;
lineHeight = 15;

//*********************DATABASE
var itemList, gemList, fieldList, curseList, pitchList, dictionary; 
powerCount = 0;
curseCount = 0;

loadDB();

tempGem = 0;

//********************SAVE DATA
stats[0] = 0.0; //Batting Average
stats[1] = 0.0; //Hit Percentage
stats[2] = 0.0; //Seagulls Hit
stats[3] = 0.0; //Best Streak
stats[4] = 0.0; //Strikeout Percentage
stats[5] = 0.0; //Max Damage
stats[6] = 0.0; //Total Damage

equip[0] = 0; //Bat
equip[1] = 0; //Power = Base + Extra
equip[2] = 0; //Speed
equip[3] = 0; //Gem0
equip[4] = 0; //Gem1
equip[5] = 0; //Gem2 

setting[0] = true; //Music
setting[1] = true; //Sound Effects
setting[2] = true; //Vibration
setting[3] = false; //Power Saver

player[0] = 321; //Player Experience
player[1] = 0; //High Score Batting **********NEW
player[2] = 0; //High Score Pitching ***********NEW
player[3] = 0; //Coins

gifts = 0; //Number of "Gifts" in Stock. 

gems = ds_list_create(); //Gem List

prestige = 0;
xpRequired = 0; 
currentLevel = getLevel();  

//XP TO NEXT LEVEL = xpRequired - player[0];


//Object Variables

//*******BATS
batShapeShift = false;
batOverHeat = false;
batRiskyBusiness = false;
batSlugBat = false;
batLefty = false;

//********BIRDS
birdHappyBirthday = false;

//********PITCHER
pitcherSeeingDouble = false;
pitcherUltraMan = false;

//*******BALL
ballMaxSpeed = false;
ballGhost = false;

//Curse Effected Values
powerCurseExtra = 0;
speedCurseExtra = 0;
feverSafety = 0;
futureChance = 0;
snipeChance = 0;
foggyWindows = false;
earthquake = false;
wavy = false;
wizKid = false;
multiplier = 1;

//Game Info
gameState = 0; //0 = Loading, 1 = Menus, 2 = In Game, 3 = Game Over, 4 = OS Paused
strikes = 0;
currentField = 0; 
canSwing = true; 
swingLong = false;
swingCount = 0;
swingCharge = 0; 
swingArc = 0;
ballHit = false; 
ballExitSpeed = 0;
ballState = 0;
score = 0;
difficulty = 0; 
dirMulti = 1;
birdMulti = 1;
fever = 0;
maxFever = 3;


//Temporary Variables
lastBuiltCurse = 999;

gameStart(); 


alarm[0] = 1; 
ballSpeed = 10;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_list_destroy(list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (keyboard_check_pressed(vk_anykey) == true)
{
    switch (keyboard_key)
    {
        case vk_down:{
        offset = max(offset - 1, 0);
        doffset = max(doffset - 1, 0);
        if (tempGem == 0) {
            tempGem = array_height_2d(gemList)-1;
            equip[3] = tempGem;
            equip[4] = 9999999;
            equip[5] = 9999999;
            
        }
        else {
            tempGem--;
            equip[3] = tempGem;
            equip[4] = 9999999;
            equip[5] = 9999999;
            
        }

        break;
        }
        case vk_up:{
        offset = min(offset + 1, (ds_list_size(list) - min(ds_list_size(list), length)));
        doffset  = min(doffset + 1, (ds_list_size(savelist) - min(ds_list_size(savelist), length)));
        if (tempGem == array_height_2d(gemList)-1) {
            tempGem = 0;
            equip[3] = tempGem;
            equip[4] = 9999999;
            equip[5] = 9999999;
        }
        else {
            tempGem++;
            equip[3] = tempGem;
            equip[4] = 9999999;
            equip[5] = 9999999;
        }
        score++; 
         break;
        }
        case vk_left: {
        if (equip[0] == 0) {
            equip[0] = array_height_2d(itemList)-5;
        }
        else {
            equip[0]--;
        }
        break;
        }
        case vk_right:
        {
        if (equip[0] == array_height_2d(itemList)-5) {
            equip[0] = 0;
        }
        else {
            equip[0]++;
        }
        break;
        }
        case vk_space:
        {
        equip[3] = tempGem;
            equip[4] = 9999999;
            equip[5] = 9999999;
        setEquipment(equip[0]);
        if (debug) {
            //debug = false;
            //obj_scaler.visible = false;
        }
        else {
         //   debug = true;
          //  obj_scaler.visible = true;
        }
        break;}
        case ord("0"): {
        if (debug) {
            debug = false;
        }
        else {
            debug = true;
        }
        break;
        }
        case ord("1"):
        debugType = 0;
        break;
        case ord("2"):
        debugType = 1;
        break;
        case ord("A"):
        canSwing = false;
        break;
        case ord("3"): 
        debugType = 2; 
        break;
        case ord("D"):{
        canSwing = false;
        swingLong = true;
        break;}
        case ord("4") : {
                if (score &gt; 0) {
        score--; 
        }
        break;
        }
        case ord("5"): {
           score++; 
        break;
        }
        case ord("R"): {
        addRandomGems(); 
        break; 
        }
        case ord("P"): {
        if (debug) {
           debug = false;
        }
        else {
        debug = true; 
        }
        }   
    }
}

if (!canSwing) {
if (swingArc &lt; 360) {

if (manager.ballHit) {
swingArc += equip[2]*.85;
}
else if (!swingLong) {
swingArc += equip[2];
}
else {
swingArc += equip[2]*.65;
}
}
else {
swingArc = 0;
canSwing = true;
swingLong = false;
}
}
else {
swingArc = 0;
canSwing = true;
swingLong = false;
}

//Difficulty Manager

difficulty = logn(100-currentLevel, power(score,3));

if (difficulty &lt; 0) 
    difficulty = 0; 

if os_is_paused() {

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>manager</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (debug) {
    draw_set_color(c_black);
    draw_set_alpha(0.5); 
    draw_rectangle(view_xview[0],view_yview[0] + view_hview[0]-(view_hview[0] * 0.25),view_xview[0] + view_wview[0],view_yview[0] + view_hview[0],false);
    
    draw_set_alpha(1);
    draw_set_color(c_white); 
    switch (debugType) 
    {
        case 0 : { //Event Reporting
            var i, n, line = "";
            for (i = 0; i &lt; min(ds_list_size(list), length); i++)
            {
                line += string(ds_list_find_value(list, i + max(ds_list_size(list) - length, 0) - offset)) + "#";
            }
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding, line);
            break;
        }    
        case 1 : { //Batting 
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding, "Current Bat: " + itemList[equip[0],0]);
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+lineHeight, "Current Power: " + string(equip[1]) + " Current Speed: " + string(equip[2])); 
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*2), "Directional Multiplier: " + string(dirMulti) + " Bird Multiplier: " + string(birdMulti));
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*3), "Exit Swing Arc: " + string(swingArc) + " Exit Ball Speed: " + string(ballExitSpeed));
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*4), "Ball State: " + string(ballState) + " Game State: " + string(gameState));
             draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*5), "Current Fever: " + string(fever) + " Max Fever: " + string(maxFever));
               draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*6), "Gem 0: " + string(gemList[tempGem,0]));
                draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding+(lineHeight*7), "Power Curse Extra: " + string(powerCurseExtra) + " speedCurseExtra: " + string(speedCurseExtra));
                                   break;
        }  //+ " Gem 1: " + string(gemList[0,equip[4]]) + " Gem 2: " + string(gemList[0,equip[5]]))
        case 2: { //Event Reporting
            var i, n, line = "";
            for (i = 0; i &lt; min(ds_list_size(savelist), length); i++)
            {
                line += string(ds_list_find_value(savelist, i + max(ds_list_size(savelist) - length, 0) - doffset)) + "#";
            }
            draw_text(view_xview[0] + padding,(view_yview[0] + view_hview[0]-(view_hview[0] * 0.25))+padding, line);
            break;
        }  
        
    }
    
}
draw_text(view_wview[0]/2,view_hview[0]/2,score); 
//edgeds_draw_background(background0, view_xview[0]-37,0, 0, false, false, 0);
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
