<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ANIMATING BACKGROUNDS =&gt; CUSTOM SETTERS
/*

ANIMATING BACKGROUNDS

To animate backgrounds there are two ways
    1- Ussing CUSTOMVARS (cv_ functions)
    2- Ussing CUSTOM SETTERS
    
This object ilustrates how to use CUSTOM SETTERS to animate backgrounds
To learn about CUSTOM SETTERS, please check 
    Objects &gt; demo &gt; custom_setters &gt; obj_custom_setters 
*/


// Step 1 - Create our custom setter script
// Script set_background0_x (you can find it in Scripts &gt; demo &gt; set_background0_x script)  
//      if (argument_count==0) {return background_x[0];}
//      background_x[0] = argument[0];

// Step 2 - Add our custom setter (only needed for HTML5, but recomended for all plataforms) 
tween_system_setter_add("background0_x", set_background0_x);

// Step 3 - Animate our background
// (Check the step event) 
//      tween_to(id, 2, array("background0_x", background_x[0] + 200 )); 





//// CREATE OUR BASIC BUTTON (BB) 
// For info about basic buttons check the first example
// Creates the "Tween" button.
button_tween = bb_create(x-100, y, "Tween", 30, font_lato, spr_button_orange, true);
// Sets the text colour of the button to c_white and the text alpha to 0.88
bb_set_color(button_tween, c_white, .88);
// Sets the width of the button to 200px (the default is autosize mode)
bb_set_width(button_tween, 200);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHECK THE CREATE EVENT FIRST!!!

// Update our basic button
bb_step(button_tween);

// If the button is pressed
if (bb_on_pressed(button_tween)) {

    // Tween!! (check the create event for more info)
    tween_to(id, 3, array("background0_x", background_x[0] + 400 ,"ease", ease_backinout)); 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// CHECK THE CREATE EVENT FIRST!!

// draw our basic button
bb_draw(button_tween);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
